---
interface Props {
	variant?: "offset" | "small";
}

const { variant } = Astro.props;
---

<section>
	<!--tagline="Une liste de l'ensemble de mes projets personnels codÃ©s durant ces derniers temps.Vous pouvez retrouver l'ensemble de mes projets sur mon GitHub." -->
	<div class="project-grid">
		<div class="project-card">
			<h2 class="project-title">FrontendMentor</h2>
			<p class="project-description">
				Some projects made by me selected from the FrontendMentor.com
				website.
			</p>
			<div class="project-tags">
				<span class="tag">HTML</span>
				<span class="tag">CSS</span>
				<span class="tag">JS</span>
				<span class="tag">REACT</span>
			</div>
			<a
				href="https://github.com/yourusername/project1"
				class="github-link"
				target="_blank"
				rel="noopener noreferrer">View on GitHub</a
			>
		</div>
		<div class="project-card">
			<h2 class="project-title">Introduction to Flask</h2>
			<p class="project-description">
				Introduction to Flask by following the documentation on the
				official site.
			</p>
			<div class="project-tags">
				<span class="tag">Python</span>
			</div>
			<a
				href="https://github.com/yourusername/project2"
				class="github-link"
				target="_blank"
				rel="noopener noreferrer">View on GitHub</a
			>
		</div>
		<div class="project-card">
			<h2 class="project-title">Introduction to TalwindCSS</h2>
			<p class="project-description">
				I took inspiration from the Tailwind CSS documentation to make
				this project and do some challenges.
			</p>
			<div class="project-tags">
				<span class="tag">HTML</span>
			</div>
			<a
				href="https://github.com/yourusername/project2"
				class="github-link"
				target="_blank"
				rel="noopener noreferrer">View on GitHub</a
			>
		</div>
		<div class="project-card">
			<h2 class="project-title">Introduction to React</h2>
			<p class="project-description">
				By following <a href="w3school.com">w3school</a> 's explanations
				on the React part, I was able to complete these challenges.
			</p>
			<div class="project-tags">
				<span class="tag">React</span>
				<span class="tag">Javascript</span>
			</div>
			<a
				href="https://gitlab.com/diallo5/react/-/tree/main/BMI_project/bmi_react?ref_type=heads"
				class="github-link"
				target="_blank"
				rel="noopener noreferrer">View on Gitlab</a
			>
		</div>
	</div>
	<style>
		h1 {
			text-align: center;
			margin-bottom: 30px;
		}
		.project-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 20px;
		}
		.project-card {
			border: 1px solid #ddd;
			border-radius: 8px;
			padding: 20px;
			display: flex;
			flex-direction: column;
		}
		.project-title {
			font-size: 1.5em;
			margin-bottom: 10px;
		}
		.project-description {
			margin-bottom: 15px;
			flex-grow: 1;
		}
		.project-tags {
			display: flex;
			flex-wrap: wrap;
			gap: 8px;
			margin-bottom: 15px;
		}
		.tag {
			background-color: #f0f0f0;
			padding: 5px 10px;
			border-radius: 20px;
			font-size: 0.8em;
			color: var(--tag-color);
			font-size: medium;
		}
		.github-link {
			display: inline-block;
			background-color: #24292e;
			color: white;
			padding: 10px 15px;
			text-decoration: none;
			border-radius: 5px;
			transition: background-color 0.3s;
		}
		.github-link:hover {
			background-color: #555;
		}
		.tag:hover {
			background-color: blueviolet;
			color: white;
			cursor: pointer;
		}
	</style>
</section>

<!--  <ul class:list={['grid', { offset: variant === 'offset', small: variant === 'small' }]}>
	<slot />  
</ul> -->

<!-- <style>
	.grid {
		display: grid;
		grid-auto-rows: 1fr;
		gap: 1rem;
		list-style: none;
		padding: 0;
	}

	.grid.small {
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
	}

	/* If last row contains only one item, make it span both columns. */
	.grid.small > :global(:last-child:nth-child(odd)) {
		grid-column: 1 / 3;
	}

	@media (min-width: 50em) {
		.grid {
			grid-template-columns: 1fr 1fr;
			gap: 4rem;
		}

		.grid.offset {
			--row-offset: 7.5rem;
			padding-bottom: var(--row-offset);
		}

		/* Shift first item in each row vertically to create staggered effect. */
		.grid.offset > :global(:nth-child(odd)) {
			transform: translateY(var(--row-offset));
		}

		/* If last row contains only one item, display it in the second column. */
		.grid.offset > :global(:last-child:nth-child(odd)) {
			grid-column: 2 / 3;
			transform: none;
		}

		.grid.small {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			gap: 2rem;
		}

		.grid.small > :global(*) {
			flex-basis: 20rem;
		}
	}
</style> -->
