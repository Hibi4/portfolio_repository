---
import BaseLayout from "../../layouts/BaseLayout.astro";

import ContactCTA from "../../components/fr/ContactCTA.astro";
import Hero from "../../components/Hero.astro";
import '../../styles/skills.css'
---

<BaseLayout
	title="About | Ousmane Diallo"
	description="A propos Ousmane Diallo"
>
	<div class="stack gap-20">
		<main class="wrapper about">
			<Hero
				title="A propos"
				tagline=""
			/>
			<section>
				<h2 class="section-title">Education</h2>
				<div class="content">
					<p>
						Pour plus d'informations sur cette section, Veuillez
						visiter la page Education du site. <a href="/education/"
							>Education</a>
					</p>
				</div>
			</section>
			<section>
				<h2 class="section-title">Compétences</h2>
				<div class="content">
					<p> Mes compétences non-techniques <p>
						<div class="skills-section">
							<div class="container">
								<div class="skills-grid" id="skillsGrid">
									
									<!-- skills will be dynamically inserted here -->
								</div>
							</div>
						</div>
					<!-- <p>Je vais détailler mes compétences non-techniques:</p>
					<ul>
						<li>Communication</li>
						<li>Organisation</li>
						<li>Leadership</li>
						<li>Créativité</li>
					</ul> -->
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
	<script>
	const nonTechnicalSkills = [
    { 
        name: "Gestion de Projet", 
        icon: "trending-up",
        description: "Nos chefs de projet expérimentés assurent une livraison dans les délais et une allocation optimale des ressources, maintenant vos projets sur la bonne voie et dans les limites du budget.",
        keyPoints: ["Méthodologies Agile", "Gestion des risques", "Communication avec les parties prenantes"]
    },
    { 
        name: "Collaboration d'Équipe", 
        icon: "users",
        description: "Nous favorisons une culture de collaboration, tirant parti de compétences et de perspectives diverses pour stimuler l'innovation et obtenir des résultats exceptionnels.",
        keyPoints: ["Travail d'équipe interfonctionnel", "Partage des connaissances", "Expertise en outils collaboratifs"]
    },
    { 
        name: "Résolution de Problèmes", 
        icon: "lightbulb",
        description: "Notre équipe excelle dans la résolution de défis complexes, en employant une réflexion créative et des approches basées sur les données pour trouver des solutions efficaces.",
        keyPoints: ["Pensée analytique", "Esprit d'innovation", "Amélioration continue"]
    },
    { 
        name: "Communication", 
        icon: "message-circle",
        description: "Une communication claire et efficace est au cœur de notre succès, assurant l'alignement avec les clients et une exécution fluide des projets.",
        keyPoints: ["Gestion des relations clients", "Rédaction technique", "Compétences en présentation"]
    },
    { 
        name: "Planification Stratégique", 
        icon: "target",
        description: "Nous aidons les entreprises à définir et atteindre leurs objectifs à long terme grâce à une planification et une exécution stratégiques complètes.",
        keyPoints: ["Analyse de marché", "Définition d'objectifs", "Suivi des performances"]
    },
];

function createSkillCard(skill : any) {
    const card = document.createElement('div');
    card.className = 'skill-card';

    const header = document.createElement('div');
    header.className = 'skill-header';

    const icon = document.createElement('span');
    icon.className = 'skill-icon';
    icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><use xlink:href="#${skill.icon}"></use></svg>`;

    const nom = document.createElement('h3');
    nom.className = 'skill-name';
    nom.textContent = skill.name;

    header.appendChild(icon);
    header.appendChild(nom);

    const description = document.createElement('p');
    description.className = 'skill-description';
    description.textContent = skill.description;

    const points = document.createElement('ul');
    points.className = 'skill-points';

    skill.keyPoints.forEach((point: string) => {
        const li = document.createElement('li');
        const span = document.createElement('span');
        span.textContent = point;
        li.appendChild(span);
        points.appendChild(li);
    });

    card.appendChild(header);
    card.appendChild(description);
    card.appendChild(points);

    return card;
}

function renderSkills() {
    const skillsGrid = document.getElementById('skillsGrid');
    if (skillsGrid) {
        nonTechnicalSkills.forEach(skill => {
            const card = createSkillCard(skill);
            skillsGrid.appendChild(card);
        });
    }
}

// SVG sprite for icons
const svgSprite = `
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="trending-up" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline>
        <polyline points="17 6 23 6 23 12"></polyline>
    </symbol>
    <symbol id="users" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
        <circle cx="9" cy="7" r="4"></circle>
        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
    </symbol>
    <symbol id="lightbulb" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="9" y1="18" x2="15" y2="18"></line>
        <line x1="10" y1="22" x2="14" y2="22"></line>
        <path d="M15.09 14c.18-.98.65-1.74 1.41-2.5A4.65 4.65 0 0 0 18 8 6 6 0 0 0 6 8c0 1 .23 2.23 1.5 3.5A4.61 4.61 0 0 1 8.91 14"></path>
    </symbol>
    <symbol id="message-circle" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
    </symbol>
    <symbol id="target" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <circle cx="12" cy="12" r="6"></circle>
        <circle cx="12" cy="12" r="2"></circle>
    </symbol>
</svg>
`;

document.body.insertAdjacentHTML('afterbegin', svgSprite);

document.addEventListener('DOMContentLoaded', renderSkills);
	</script>
</BaseLayout>

<style>
	.about {
		display: flex;
		flex-direction: column;
		gap: 3.5rem;
	}

	img {
		margin-top: 1.5rem;
		border-radius: 1.5rem;
		box-shadow: var(--shadow-md);
	}

	section {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		color: var(--gray-200);
	}

	.section-title {
		grid-column-start: 1;
		font-size: var(--text-xl);
		color: var(--gray-0);
	}

	.content {
		grid-column: 2 / 4;
	}

	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	ul {
        list-style-type: none;
        padding: 0;
    }
    li {
        font-size: 1.2rem;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
		background-color: #e0e0e0;
        box-shadow: 0 2px 5px rgba(108, 99, 99, 0.1);
        opacity: 1;
		width: 20%;
        transform: translateY(20px);
        transition: opacity 0.5s, transform 0.5s, background-color 0.3s;
    }
    
    li.visible {
        opacity: 1;
        transform: translateY(0);
    } 

	@media (min-width: 50em) {
		.about {
			display: grid;
			grid-template-columns: 1fr 60% 1fr;
		}

		.about > :global(:first-child) {
			grid-column-start: 2;
		}

		section {
			display: contents;
			font-size: var(--text-lg);
		}
	}
</style>
